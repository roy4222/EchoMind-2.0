{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/components/chat/MessageList.tsx"],"sourcesContent":["/**\r\n * 聊天訊息列表組件\r\n * 顯示聊天訊息並處理載入狀態的動畫效果\r\n */\r\n\r\nimport { type ChatMessage } from '@/lib/types/chat';\r\nimport { RefObject } from 'react';\r\n\r\ninterface MessageListProps {\r\n  /** 聊天訊息陣列 */\r\n  messages: ChatMessage[];\r\n  /** 是否正在載入中 */\r\n  isLoading: boolean;\r\n  /** 用於滾動到最新訊息的 ref */\r\n  messagesEndRef: RefObject<HTMLDivElement | null>;\r\n}\r\n\r\n/**\r\n * 訊息列表組件\r\n * @param props - 組件屬性\r\n * @returns 訊息列表 JSX 元素\r\n */\r\nexport function MessageList({ messages, isLoading, messagesEndRef }: MessageListProps) {\r\n  return (\r\n    // 可滾動的訊息容器\r\n    <div className=\"flex-1 space-y-6 overflow-y-auto\">\r\n      {/* 遍歷並渲染所有訊息 */}\r\n      {messages.map((message, index) => (\r\n        <div\r\n          key={index}\r\n          className={`flex ${\r\n            // 使用者訊息靠右對齊，AI 助手訊息靠左對齊\r\n            message.role === 'user' ? 'justify-end' : 'justify-start'\r\n          }`}\r\n        >\r\n          <div\r\n            className={`max-w-[80%] rounded-xl px-4 py-2 ${\r\n              // 使用者訊息使用藍色背景，AI 助手訊息使用灰色背景\r\n              message.role === 'user'\r\n                ? 'bg-blue-600 text-white'\r\n                : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'\r\n            }`}\r\n          >\r\n            {message.content}\r\n          </div>\r\n        </div>\r\n      ))}\r\n      {/* 載入中動畫 */}\r\n      {isLoading && (\r\n        <div className=\"flex justify-start\">\r\n          <div className=\"max-w-[80%] rounded-xl bg-gray-100 px-4 py-2 dark:bg-gray-800\">\r\n            <div className=\"flex space-x-2\">\r\n              {/* 三個跳動的點點表示載入中 */}\r\n              <div className=\"h-2 w-2 animate-bounce rounded-full bg-gray-400\"></div>\r\n              <div className=\"h-2 w-2 animate-bounce rounded-full bg-gray-400\" style={{ animationDelay: '0.2s' }}></div>\r\n              <div className=\"h-2 w-2 animate-bounce rounded-full bg-gray-400\" style={{ animationDelay: '0.4s' }}></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* 用於滾動到最新訊息的錨點 */}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"AAAA;;;CAGC;;;;;AAmBM,SAAS,YAAY,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAoB;IACnF,OACE,WAAW;kBACX,8OAAC;QAAI,WAAU;;YAEZ,SAAS,GAAG,CAAC,CAAC,SAAS,sBACtB,8OAAC;oBAEC,WAAW,CAAC,KAAK,EACf,wBAAwB;oBACxB,QAAQ,IAAI,KAAK,SAAS,gBAAgB,iBAC1C;8BAEF,cAAA,8OAAC;wBACC,WAAW,CAAC,iCAAiC,EAC3C,4BAA4B;wBAC5B,QAAQ,IAAI,KAAK,SACb,2BACA,8DACJ;kCAED,QAAQ,OAAO;;;;;;mBAdb;;;;;YAmBR,2BACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;;;;;;0CACf,8OAAC;gCAAI,WAAU;gCAAkD,OAAO;oCAAE,gBAAgB;gCAAO;;;;;;0CACjG,8OAAC;gCAAI,WAAU;gCAAkD,OAAO;oCAAE,gBAAgB;gCAAO;;;;;;;;;;;;;;;;;;;;;;0BAMzG,8OAAC;gBAAI,KAAK;;;;;;;;;;;;AAGhB","debugId":null}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/components/chat/ChatInput.tsx"],"sourcesContent":["/**\r\n * 聊天輸入框組件\r\n * 提供使用者輸入訊息並發送的介面\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { Send } from 'lucide-react';\r\n\r\ninterface ChatInputProps {\r\n  /** 提交訊息的回調函數 */\r\n  onSubmit: (input: string) => Promise<void>;\r\n  /** 是否正在載入中 */\r\n  isLoading: boolean;\r\n}\r\n\r\nexport function ChatInput({ onSubmit, isLoading }: ChatInputProps) {\r\n  // 管理輸入框的值\r\n  const [input, setInput] = useState('');\r\n\r\n  /**\r\n   * 處理表單提交\r\n   * @param e - 表單事件\r\n   */\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    // 如果輸入為空或正在載入中則不處理\r\n    if (!input.trim() || isLoading) return;\r\n    \r\n    await onSubmit(input);\r\n    setInput(''); // 清空輸入框\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"flex w-full items-center space-x-2 pt-4\">\r\n      <div className=\"relative flex-1\">\r\n        {/* 訊息輸入框 */}\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"繼續對話...\"\r\n          className=\"w-full rounded-xl border border-gray-200 bg-white/80 px-4 py-3 pr-10 text-gray-900 shadow-sm backdrop-blur-sm transition-all duration-300 placeholder:text-gray-400 focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800/80 dark:text-white dark:placeholder:text-gray-500 dark:focus:border-blue-400 dark:focus:bg-gray-800\"\r\n          disabled={isLoading}\r\n        />\r\n        {/* 提示文字 */}\r\n        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400\">\r\n          按下 Enter 發送\r\n        </div>\r\n      </div>\r\n      {/* 發送按鈕 */}\r\n      <button\r\n        type=\"submit\"\r\n        disabled={isLoading}\r\n        className={`inline-flex h-12 w-12 items-center justify-center rounded-xl ${\r\n          isLoading\r\n            ? 'bg-gray-400 dark:bg-gray-700'\r\n            : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:shadow-xl hover:shadow-blue-500/35'\r\n        } text-white shadow-lg shadow-blue-500/25 transition-all duration-300 dark:from-blue-400 dark:to-blue-500`}\r\n      >\r\n        <Send className=\"h-5 w-5\" />\r\n      </button>\r\n    </form>\r\n  );\r\n} "],"names":[],"mappings":"AAAA;;;CAGC;;;;AAED;AACA;;;;AASO,SAAS,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAkB;IAC/D,UAAU;IACV,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnC;;;GAGC,GACD,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,mBAAmB;QACnB,IAAI,CAAC,MAAM,IAAI,MAAM,WAAW;QAEhC,MAAM,SAAS;QACf,SAAS,KAAK,QAAQ;IACxB;IAEA,qBACE,8OAAC;QAAK,UAAU;QAAc,WAAU;;0BACtC,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBACC,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;wBACxC,aAAY;wBACZ,WAAU;wBACV,UAAU;;;;;;kCAGZ,8OAAC;wBAAI,WAAU;kCAA0D;;;;;;;;;;;;0BAK3E,8OAAC;gBACC,MAAK;gBACL,UAAU;gBACV,WAAW,CAAC,6DAA6D,EACvE,YACI,iCACA,sFACL,wGAAwG,CAAC;0BAE1G,cAAA,8OAAC,kMAAA,CAAA,OAAI;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAIxB","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/components/ui/Greeting.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nexport const Greeting = () => {\r\n  // 用於存儲問候語的狀態\r\n  const [greeting, setGreeting] = useState('');\r\n\r\n  useEffect(() => {\r\n    // 根據當前時間獲取適當的問候語\r\n    const getGreeting = () => {\r\n      const hour = new Date().getHours();\r\n      \r\n      if (hour >= 5 && hour < 12) {\r\n        return '早安';\r\n      } else if (hour == 12) {\r\n        return '中午好';\r\n      } else if (hour > 12 && hour < 18) {\r\n        return '下午好';\r\n      } else if (hour >= 18 && hour < 22) {\r\n        return '晚上好';\r\n      } else {\r\n        return '永遠是深夜有多好';\r\n      }\r\n    };\r\n\r\n    // 設置問候語\r\n    setGreeting(getGreeting());\r\n  }, []); // 空依賴陣列表示僅在組件掛載時執行一次\r\n\r\n  return (\r\n    // 使用 Framer Motion 創建動畫容器\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }} // 初始狀態：不可見且向下偏移\r\n      animate={{ opacity: 1, y: 0 }} // 動畫到：完全可見且回到原位\r\n      transition={{ duration: 0.8, ease: \"easeOut\" }} // 動畫持續時間和緩動函數\r\n      className=\"text-center\"\r\n    >\r\n      <h1 className=\"text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl\">\r\n        {/* 問候語文本，使用漸變背景色 */}\r\n        <motion.span\r\n          initial={{ backgroundPosition: \"0% 50%\" }}\r\n          animate={{ backgroundPosition: \"100% 50%\" }}\r\n          transition={{ duration: 5, repeat: Infinity, repeatType: \"reverse\" }}\r\n          className=\"block text-transparent bg-clip-text bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 bg-[size:200%]\"\r\n        >\r\n          {greeting}\r\n        </motion.span>\r\n        {/* \"歡迎使用 EchoMind\" 文本，帶有延遲出現的動畫 */}\r\n        <motion.span\r\n          initial={{ opacity: 0, y: 10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ duration: 0.5, delay: 0.3 }}\r\n          className=\"mt-2 block\"\r\n        >\r\n          歡迎使用 EchoMind\r\n        </motion.span>\r\n      </h1>\r\n      {/* 副標題，帶有淡入動畫 */}\r\n      <motion.p\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        transition={{ duration: 0.5, delay: 0.6 }}\r\n        className=\"mt-4 text-lg text-gray-600 dark:text-gray-300\"\r\n      >\r\n        您的輔大資管好幫手，隨時為您服務\r\n      </motion.p>\r\n    </motion.div>\r\n  );\r\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKO,MAAM,WAAW;IACtB,aAAa;IACb,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,iBAAiB;QACjB,MAAM,cAAc;YAClB,MAAM,OAAO,IAAI,OAAO,QAAQ;YAEhC,IAAI,QAAQ,KAAK,OAAO,IAAI;gBAC1B,OAAO;YACT,OAAO,IAAI,QAAQ,IAAI;gBACrB,OAAO;YACT,OAAO,IAAI,OAAO,MAAM,OAAO,IAAI;gBACjC,OAAO;YACT,OAAO,IAAI,QAAQ,MAAM,OAAO,IAAI;gBAClC,OAAO;YACT,OAAO;gBACL,OAAO;YACT;QACF;QAEA,QAAQ;QACR,YAAY;IACd,GAAG,EAAE,GAAG,qBAAqB;IAE7B,OACE,0BAA0B;kBAC1B,8OAAC,0LAAA,CAAA,SAAM,CAAC,GAAG;QACT,SAAS;YAAE,SAAS;YAAG,GAAG;QAAG;QAC7B,SAAS;YAAE,SAAS;YAAG,GAAG;QAAE;QAC5B,YAAY;YAAE,UAAU;YAAK,MAAM;QAAU;QAC7C,WAAU;;0BAEV,8OAAC;gBAAG,WAAU;;kCAEZ,8OAAC,0LAAA,CAAA,SAAM,CAAC,IAAI;wBACV,SAAS;4BAAE,oBAAoB;wBAAS;wBACxC,SAAS;4BAAE,oBAAoB;wBAAW;wBAC1C,YAAY;4BAAE,UAAU;4BAAG,QAAQ;4BAAU,YAAY;wBAAU;wBACnE,WAAU;kCAET;;;;;;kCAGH,8OAAC,0LAAA,CAAA,SAAM,CAAC,IAAI;wBACV,SAAS;4BAAE,SAAS;4BAAG,GAAG;wBAAG;wBAC7B,SAAS;4BAAE,SAAS;4BAAG,GAAG;wBAAE;wBAC5B,YAAY;4BAAE,UAAU;4BAAK,OAAO;wBAAI;wBACxC,WAAU;kCACX;;;;;;;;;;;;0BAKH,8OAAC,0LAAA,CAAA,SAAM,CAAC,CAAC;gBACP,SAAS;oBAAE,SAAS;gBAAE;gBACtB,SAAS;oBAAE,SAAS;gBAAE;gBACtB,YAAY;oBAAE,UAAU;oBAAK,OAAO;gBAAI;gBACxC,WAAU;0BACX;;;;;;;;;;;;AAKP","debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/components/chat/WelcomeScreen.tsx"],"sourcesContent":["/**\r\n * 歡迎畫面組件\r\n * 顯示問候語、聊天輸入框和功能按鈕\r\n */\r\n\r\nimport { Greeting } from \"@/components/ui/Greeting\";\r\nimport { Sparkles, Search, Lightbulb } from 'lucide-react';\r\nimport { ChatInput } from './ChatInput';\r\n\r\ninterface WelcomeScreenProps {\r\n  /** 提交訊息的回調函數 */\r\n  onSubmit: (input: string) => Promise<void>;\r\n  /** 是否正在載入中 */\r\n  isLoading: boolean;\r\n}\r\n\r\n/**\r\n * 歡迎畫面組件\r\n * @param props - 組件屬性\r\n * @returns 歡迎畫面 JSX 元素\r\n */\r\nexport function WelcomeScreen({ onSubmit, isLoading }: WelcomeScreenProps) {\r\n  return (\r\n    <>\r\n      {/* 問候語組件 */}\r\n      <Greeting />\r\n      \r\n      {/* 聊天輸入框 */}\r\n      <ChatInput onSubmit={onSubmit} isLoading={isLoading} />\r\n\r\n      {/* 功能按鈕列表 */}\r\n      <div className=\"flex flex-wrap justify-center gap-3\">\r\n        {/* 搜尋知識庫按鈕 */}\r\n        <button className=\"flex items-center gap-2 rounded-lg border border-gray-200 bg-white/50 px-4 py-2.5 text-sm text-gray-600 backdrop-blur-sm transition-all duration-300 hover:bg-white hover:shadow-md dark:border-gray-700 dark:bg-gray-800/50 dark:text-gray-300 dark:hover:bg-gray-800\">\r\n          <Search className=\"h-4 w-4\" />\r\n          <span>搜尋知識庫</span>\r\n        </button>\r\n        {/* 生成圖片按鈕 */}\r\n        <button className=\"flex items-center gap-2 rounded-lg border border-gray-200 bg-white/50 px-4 py-2.5 text-sm text-gray-600 backdrop-blur-sm transition-all duration-300 hover:bg-white hover:shadow-md dark:border-gray-700 dark:bg-gray-800/50 dark:text-gray-300 dark:hover:bg-gray-800\">\r\n          <Sparkles className=\"h-4 w-4\" />\r\n          <span>生成圖片</span>\r\n        </button>\r\n        {/* 智能助手按鈕 */}\r\n        <button className=\"flex items-center gap-2 rounded-lg border border-gray-200 bg-white/50 px-4 py-2.5 text-sm text-gray-600 backdrop-blur-sm transition-all duration-300 hover:bg-white hover:shadow-md dark:border-gray-700 dark:bg-gray-800/50 dark:text-gray-300 dark:hover:bg-gray-800\">\r\n          <Lightbulb className=\"h-4 w-4\" />\r\n          <span>智能助手</span>\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n} "],"names":[],"mappings":"AAAA;;;CAGC;;;;AAED;AACA;AAAA;AAAA;AACA;;;;;AAcO,SAAS,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAsB;IACvE,qBACE;;0BAEE,8OAAC,oIAAA,CAAA,WAAQ;;;;;0BAGT,8OAAC,uIAAA,CAAA,YAAS;gBAAC,UAAU;gBAAU,WAAW;;;;;;0BAG1C,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAO,WAAU;;0CAChB,8OAAC,sMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;0CAClB,8OAAC;0CAAK;;;;;;;;;;;;kCAGR,8OAAC;wBAAO,WAAU;;0CAChB,8OAAC,0MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;0CACpB,8OAAC;0CAAK;;;;;;;;;;;;kCAGR,8OAAC;wBAAO,WAAU;;0CAChB,8OAAC,4MAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;0CACrB,8OAAC;0CAAK;;;;;;;;;;;;;;;;;;;;AAKhB","debugId":null}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/lib/services/groq.ts"],"sourcesContent":["/**\r\n * 引入聊天相關的型別定義\r\n */\r\nimport type { ChatMessage, ChatCompletionOptions, ChatResponse, GroqChatResponse } from '@/lib/types/chat';\r\n\r\n/**\r\n * Groq 服務類別\r\n * 用於處理與 Groq API 的通訊\r\n */\r\nclass GroqService {\r\n  /** 預設使用的語言模型 */\r\n  private defaultModel: string = 'llama-3.1-8b-instant';\r\n\r\n  /**\r\n   * 發送聊天請求到 Groq API\r\n   * @param options - 聊天配置選項\r\n   * @param options.messages - 聊天訊息歷史\r\n   * @param options.model - 使用的語言模型，預設為 llama-3.1-8b-instant\r\n   * @param options.temperature - 溫度參數，控制回應的隨機性，預設為 0.7\r\n   * @param options.maxTokens - 最大生成的 token 數量，預設為 2048\r\n   * @param options.stream - 是否使用串流回應，預設為 false\r\n   * @returns 回傳 API 的回應資料\r\n   */\r\n  async chat({\r\n    messages,\r\n    model = this.defaultModel,\r\n    temperature = 0.7,\r\n    maxTokens = 2048,\r\n    stream = false,\r\n  }: ChatCompletionOptions): Promise<GroqChatResponse> {\r\n    try {\r\n      // 檢查是否為靜態環境（根據 Next.js 配置的 output: 'export'）\r\n      // 在靜態環境中，我們直接返回模擬回應\r\n      if (typeof window !== 'undefined') {\r\n        // 只在客戶端嘗試 API 請求\r\n        try {\r\n          // 嘗試發送 POST 請求到 API 端點\r\n          const response = await fetch('/api/chat', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              messages,\r\n              model,\r\n              temperature,\r\n              maxTokens,\r\n              stream,\r\n            }),\r\n          });\r\n\r\n          // 檢查回應狀態\r\n          if (!response.ok) {\r\n            throw new Error('API 請求失敗');\r\n          }\r\n\r\n          // 解析回應資料\r\n          const data = await response.json() as ChatResponse;\r\n          \r\n          // 檢查 API 回應是否成功\r\n          if (!data.success) {\r\n            throw new Error(data.error?.message || 'API 請求失敗');\r\n          }\r\n\r\n          return data.data as GroqChatResponse;\r\n        } catch (apiError) {\r\n          console.error('API 請求失敗，使用模擬回應。', apiError);\r\n          // 使用模擬回應作為回退方案\r\n        }\r\n      } else {\r\n        console.log('靜態環境中運行，使用模擬回應');\r\n      }\r\n      \r\n      // 在靜態環境或 API 請求失敗時使用模擬回應\r\n      return this.getMockResponse(messages);\r\n    } catch (error) {\r\n      console.error('聊天請求錯誤:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成模擬回應\r\n   * @param messages 使用者訊息\r\n   * @returns 模擬的API回應\r\n   */\r\n  private getMockResponse(messages: ChatMessage[]): GroqChatResponse {\r\n    // 獲取最後一條使用者訊息\r\n    const lastUserMessage = messages[messages.length - 1].content || '';\r\n    \r\n    // 簡單的關鍵詞回應機制\r\n    let responseContent = '';\r\n    \r\n    if (lastUserMessage.includes('你好') || lastUserMessage.includes('嗨') || lastUserMessage.includes('哈囉')) {\r\n      responseContent = '您好！很高興為您服務。我是輔仁大學資管系的AI助手EchoMind。有什麼我能幫助您的嗎？';\r\n    } else if (lastUserMessage.includes('課程') || lastUserMessage.includes('學習') || lastUserMessage.includes('教學')) {\r\n      responseContent = '輔仁大學資管系提供多樣化的課程，包括程式設計、資料庫管理、網路應用等。如果您有特定課程的問題，可以告訴我更多細節。';\r\n    } else if (lastUserMessage.includes('專題') || lastUserMessage.includes('專案') || lastUserMessage.includes('project')) {\r\n      responseContent = '資管系的專題是培養實務能力的重要環節。學生通常會在大三或大四時，組隊完成一個與資訊管理相關的專案，從需求分析、設計到實作都需要參與。';\r\n    } else if (lastUserMessage.includes('就業') || lastUserMessage.includes('工作') || lastUserMessage.includes('職涯')) {\r\n      responseContent = '資管系畢業生有多元的就業方向，包括：系統分析師、程式開發、資料分析師、專案管理、數位行銷等。根據近年調查，本系畢業生就業率相當高。';\r\n    } else if (lastUserMessage.includes('老師') || lastUserMessage.includes('教授') || lastUserMessage.includes('師資')) {\r\n      responseContent = '輔仁大學資管系擁有優秀的師資陣容，包括多位專精於不同領域的教授，如資料科學、人工智慧、電子商務、資訊安全等方面的專家。';\r\n    } else if (lastUserMessage.includes('實習') || lastUserMessage.includes('產業實習') || lastUserMessage.includes('實務經驗')) {\r\n      responseContent = '輔仁大學資管系重視學生的實務經驗，提供產業實習機會，讓學生能在實際工作環境中應用所學知識，培養專業技能和工作態度，增加就業競爭力。';\r\n    } else if (lastUserMessage.includes('社團') || lastUserMessage.includes('學生活動') || lastUserMessage.includes('課外活動')) {\r\n      responseContent = '輔仁大學提供豐富的學生活動和社團選擇，資管系學生可以參加相關的技術社團，如程式設計社、資料科學社等，也可以參與系上舉辦的各種活動，拓展人際關係和培養團隊合作能力。';\r\n    } else if (lastUserMessage.includes('考研') || lastUserMessage.includes('研究所') || lastUserMessage.includes('深造')) {\r\n      responseContent = '許多資管系學生畢業後選擇繼續深造，可報考資訊管理、資訊工程、企業管理等相關研究所。本系畢業生在研究所的表現普遍優秀，歷年考取國內外知名大學的比例較高。';\r\n    } else if (lastUserMessage.includes('證照') || lastUserMessage.includes('考證') || lastUserMessage.includes('認證')) {\r\n      responseContent = '資管系學生可以考取多種專業證照，如資料庫管理（Oracle、SQL Server）、網路（CCNA）、程式設計（OCPJP）、專案管理（PMP）、雲端服務（AWS、Azure）等證照，有助於提升就業競爭力。';\r\n    } else if (lastUserMessage.includes('國際交流') || lastUserMessage.includes('交換生') || lastUserMessage.includes('留學')) {\r\n      responseContent = '輔仁大學與全球多所大學有合作關係，資管系學生可以申請交換生計畫，前往國外大學學習一學期或一學年，拓展國際視野，提升語言能力和跨文化溝通能力。';\r\n    } else if (lastUserMessage.includes('設備') || lastUserMessage.includes('實驗室') || lastUserMessage.includes('資源')) {\r\n      responseContent = '資管系擁有多個專業實驗室，如雲端運算實驗室、資料科學實驗室、人工智慧實驗室等，提供先進的硬體設備和軟體資源，支援教學和研究需求。學生也可以使用這些資源進行專題研究和專案開發。';\r\n    } else {\r\n      // 預設回應\r\n      responseContent = `您好！我是輔仁大學資管系的AI助手EchoMind。您的訊息是：「${lastUserMessage}」。我可以為您提供關於輔仁大學資管系的課程、師資、就業方向、專題等資訊。請問您想了解哪方面的內容呢？`;\r\n    }\r\n    \r\n    // 生成回應\r\n    return {\r\n      id: 'mock-' + Date.now(),\r\n      object: 'chat.completion',\r\n      created: Math.floor(Date.now() / 1000),\r\n      model: this.defaultModel,\r\n      choices: [\r\n        {\r\n          message: {\r\n            role: 'assistant',\r\n            content: responseContent,\r\n          },\r\n          index: 0,\r\n          finish_reason: 'stop',\r\n        },\r\n      ],\r\n      usage: {\r\n        prompt_tokens: 0,\r\n        completion_tokens: 0,\r\n        total_tokens: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 使用串流模式發送聊天請求\r\n   * @param options - 聊天配置選項\r\n   * @returns 回傳串流模式的聊天回應\r\n   */\r\n  async streamChat(options: ChatCompletionOptions) {\r\n    return this.chat({ ...options, stream: true });\r\n  }\r\n}\r\n\r\n// 建立單例實例\r\nexport const groqService = new GroqService();\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/components/chat/ChatInterface.tsx"],"sourcesContent":["/**\r\n * 聊天介面主組件\r\n * 整合聊天相關功能，包括訊息列表、輸入框和歡迎畫面\r\n */\r\n\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { MessageList } from './MessageList';\r\nimport { ChatInput } from './ChatInput';\r\nimport { WelcomeScreen } from './WelcomeScreen';\r\nimport { type ChatMessage } from '@/lib/types/chat';\r\nimport { groqService } from '@/lib/services/groq';\r\n\r\nexport function ChatInterface() {\r\n  // 狀態管理\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]); // 儲存聊天訊息\r\n  const [isLoading, setIsLoading] = useState(false); // 載入狀態\r\n  const [isChatStarted, setIsChatStarted] = useState(false); // 是否開始聊天\r\n  const messagesEndRef = useRef<HTMLDivElement>(null); // 用於自動滾動到最新訊息\r\n\r\n  /**\r\n   * 滾動到訊息列表底部\r\n   */\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  // 當訊息更新時自動滾動到底部\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  /**\r\n   * 處理訊息提交\r\n   * @param input - 使用者輸入的訊息\r\n   */\r\n  const handleSubmit = async (input: string) => {\r\n    if (!input.trim() || isLoading) return;\r\n\r\n    // 建立使用者訊息物件\r\n    const userMessage: ChatMessage = {\r\n      role: 'user',\r\n      content: input.trim(),\r\n    };\r\n\r\n    // 更新訊息列表和狀態\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    if (!isChatStarted) setIsChatStarted(true);\r\n\r\n    try {\r\n      // 發送請求到 Groq API\r\n      const response = await groqService.chat({\r\n        messages: [...messages, userMessage],\r\n      });\r\n\r\n      const assistantMessage: ChatMessage = {\r\n        role: 'assistant',\r\n        content: response.choices[0]?.message?.content || '抱歉，我現在無法回答。',\r\n      };\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n    } catch (error) {\r\n      // 錯誤處理\r\n      console.error('聊天發生錯誤:', error);\r\n      setMessages(prev => [...prev, {\r\n        role: 'assistant',\r\n        content: '抱歉，處理您的請求時發生錯誤。請稍後再試。',\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-full flex-col\">\r\n      <main className=\"flex-1 overflow-hidden\">\r\n        <div className=\"relative flex h-full flex-col bg-dot-pattern dark:bg-dot-pattern-dark\">\r\n          <div className=\"flex min-h-[calc(100vh-5rem)] items-center justify-center px-4\">\r\n            <div className=\"w-full max-w-3xl space-y-8 py-12\">\r\n              {!isChatStarted ? (\r\n                // 顯示歡迎畫面或聊天介面\r\n                <WelcomeScreen onSubmit={handleSubmit} isLoading={isLoading} />\r\n              ) : (\r\n                <div className=\"flex flex-col h-[calc(100vh-10rem)] justify-between\">\r\n                  <MessageList \r\n                    messages={messages} \r\n                    isLoading={isLoading} \r\n                    messagesEndRef={messagesEndRef}\r\n                  />\r\n                  <ChatInput \r\n                    onSubmit={handleSubmit}\r\n                    isLoading={isLoading}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"AAAA;;;CAGC;;;;AAED;AACA;AACA;AACA;AAEA;;;;;;;AAEO,SAAS;IACd,OAAO;IACP,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE,GAAG,SAAS;IACtE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,OAAO;IAC1D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,SAAS;IACpE,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB,OAAO,cAAc;IAEnE;;GAEC,GACD,MAAM,iBAAiB;QACrB,eAAe,OAAO,EAAE,eAAe;YAAE,UAAU;QAAS;IAC9D;IAEA,gBAAgB;IAChB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC;KAAS;IAEb;;;GAGC,GACD,MAAM,eAAe,OAAO;QAC1B,IAAI,CAAC,MAAM,IAAI,MAAM,WAAW;QAEhC,YAAY;QACZ,MAAM,cAA2B;YAC/B,MAAM;YACN,SAAS,MAAM,IAAI;QACrB;QAEA,YAAY;QACZ,YAAY,CAAA,OAAQ;mBAAI;gBAAM;aAAY;QAC1C,aAAa;QACb,IAAI,CAAC,eAAe,iBAAiB;QAErC,IAAI;YACF,iBAAiB;YACjB,MAAM,WAAW,MAAM,8HAAA,CAAA,cAAW,CAAC,IAAI,CAAC;gBACtC,UAAU;uBAAI;oBAAU;iBAAY;YACtC;YAEA,MAAM,mBAAgC;gBACpC,MAAM;gBACN,SAAS,SAAS,OAAO,CAAC,EAAE,EAAE,SAAS,WAAW;YACpD;YACA,YAAY,CAAA,OAAQ;uBAAI;oBAAM;iBAAiB;QACjD,EAAE,OAAO,OAAO;YACd,OAAO;YACP,QAAQ,KAAK,CAAC,WAAW;YACzB,YAAY,CAAA,OAAQ;uBAAI;oBAAM;wBAC5B,MAAM;wBACN,SAAS;oBACX;iBAAE;QACJ,SAAU;YACR,aAAa;QACf;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAK,WAAU;sBACd,cAAA,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;kCACZ,CAAC,gBACA,cAAc;sCACd,8OAAC,2IAAA,CAAA,gBAAa;4BAAC,UAAU;4BAAc,WAAW;;;;;iDAElD,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,yIAAA,CAAA,cAAW;oCACV,UAAU;oCACV,WAAW;oCACX,gBAAgB;;;;;;8CAElB,8OAAC,uIAAA,CAAA,YAAS;oCACR,UAAU;oCACV,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU/B","debugId":null}},
    {"offset": {"line": 711, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/app/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { ChatInterface } from '@/components/chat/ChatInterface';\r\n\r\nexport default function Home() {\r\n  return <ChatInterface />;\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBAAO,8OAAC,2IAAA,CAAA,gBAAa;;;;;AACvB","debugId":null}}]
}