{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/app/api/chat/controller.ts"],"sourcesContent":["/**\r\n * 聊天 API 控制器\r\n * 處理與 Groq API 的溝通和聊天完成請求\r\n */\r\n\r\nimport { NextResponse } from 'next/server';\r\nimport Groq from 'groq-sdk';\r\nimport { ChatMessage, ChatCompletionOptions, ChatResponse } from '@/lib/types/chat';\r\n\r\n/**\r\n * 系統提示詞設定\r\n * 定義 AI 助手的角色和行為準則\r\n */\r\nconst SYSTEM_PROMPT: ChatMessage = {\r\n  role: 'system',\r\n  content: `你是輔仁大學資訊管理學系的 AI 助手，名叫 EchoMind。\r\n  - 使用繁體中文回答\r\n  - 回答要簡潔但專業\r\n  - 對學生要友善有耐心\r\n  - 不確定的事情要誠實說不知道\r\n  - 需要時可以使用 Markdown 格式美化回答\r\n  - 專注於資管相關的學術、課程、就業諮詢\r\n  - 避免討論政治、宗教等敏感話題`\r\n};\r\n\r\n/**\r\n * 預設配置參數\r\n */\r\nconst DEFAULT_MODEL = 'llama-3.1-8b-instant';  // 預設使用的語言模型\r\nconst DEFAULT_TEMPERATURE = 0.7;                // 預設的溫度參數\r\nconst DEFAULT_MAX_TOKENS = 2048;               // 預設的最大 token 數\r\n\r\n/**\r\n * 初始化 Groq API 客戶端\r\n */\r\nconst groq = new Groq({\r\n  apiKey: process.env.GROQ_API_KEY,\r\n});\r\n\r\n/**\r\n * 處理聊天完成請求的主要函數\r\n * @param request - HTTP 請求物件\r\n * @returns 回應物件，包含成功或錯誤資訊\r\n */\r\nexport async function handleChatCompletion(request: Request) {\r\n  try {\r\n    // 解析請求內容\r\n    const body = await request.json() as ChatCompletionOptions;\r\n    const { messages, model, temperature, maxTokens, stream } = body;\r\n\r\n    // 驗證必要參數\r\n    if (!messages || !Array.isArray(messages) || messages.length === 0) {\r\n      return NextResponse.json<ChatResponse>(\r\n        { \r\n          success: false,\r\n          error: {\r\n            message: '無效的訊息格式',\r\n            code: 'INVALID_FORMAT'\r\n          }\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // 在訊息開頭加入系統提示詞\r\n    const messagesWithSystemPrompt = [SYSTEM_PROMPT, ...messages];\r\n\r\n    // 建立聊天完成請求\r\n    const completion = await groq.chat.completions.create({\r\n      messages: messagesWithSystemPrompt,\r\n      model: model || DEFAULT_MODEL,\r\n      temperature: temperature || DEFAULT_TEMPERATURE,\r\n      max_tokens: maxTokens || DEFAULT_MAX_TOKENS,\r\n      stream: stream || false,\r\n    });\r\n\r\n    // 回傳成功結果\r\n    return NextResponse.json<ChatResponse>({\r\n      success: true,\r\n      data: completion,\r\n    });\r\n\r\n  } catch (error: unknown) {\r\n    // 錯誤處理\r\n    console.error('Groq API 錯誤:', error);\r\n    \r\n    const errorMessage = error instanceof Error ? error.message : '處理請求時發生錯誤';\r\n    const errorCode = (error as Record<string, string>).code || 'UNKNOWN_ERROR';\r\n    const errorStatus = (error as Record<string, number>).status || 500;\r\n\r\n    return NextResponse.json<ChatResponse>(\r\n      {\r\n        success: false,\r\n        error: {\r\n          message: errorMessage,\r\n          code: errorCode,\r\n        },\r\n      },\r\n      { status: errorStatus }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":"AAAA;;;CAGC;;;AAED;AACA;;;AAGA;;;CAGC,GACD,MAAM,gBAA6B;IACjC,MAAM;IACN,SAAS,CAAC;;;;;;;kBAOM,CAAC;AACnB;AAEA;;CAEC,GACD,MAAM,gBAAgB,wBAAyB,YAAY;AAC3D,MAAM,sBAAsB,KAAoB,UAAU;AAC1D,MAAM,qBAAqB,MAAoB,gBAAgB;AAE/D;;CAEC,GACD,MAAM,OAAO,IAAI,uJAAA,CAAA,UAAI,CAAC;IACpB,QAAQ,QAAQ,GAAG,CAAC,YAAY;AAClC;AAOO,eAAe,qBAAqB,OAAgB;IACzD,IAAI;QACF,SAAS;QACT,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG;QAE5D,SAAS;QACT,IAAI,CAAC,YAAY,CAAC,MAAM,OAAO,CAAC,aAAa,SAAS,MAAM,KAAK,GAAG;YAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,OAAO;oBACL,SAAS;oBACT,MAAM;gBACR;YACF,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,eAAe;QACf,MAAM,2BAA2B;YAAC;eAAkB;SAAS;QAE7D,WAAW;QACX,MAAM,aAAa,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,UAAU;YACV,OAAO,SAAS;YAChB,aAAa,eAAe;YAC5B,YAAY,aAAa;YACzB,QAAQ,UAAU;QACpB;QAEA,SAAS;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAe;YACrC,SAAS;YACT,MAAM;QACR;IAEF,EAAE,OAAO,OAAgB;QACvB,OAAO;QACP,QAAQ,KAAK,CAAC,gBAAgB;QAE9B,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,MAAM,YAAY,AAAC,MAAiC,IAAI,IAAI;QAC5D,MAAM,cAAc,AAAC,MAAiC,MAAM,IAAI;QAEhE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;gBACL,SAAS;gBACT,MAAM;YACR;QACF,GACA;YAAE,QAAQ;QAAY;IAE1B;AACF","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/User/echomind2/src/app/api/chat/route.ts"],"sourcesContent":["import { handleChatCompletion } from './controller';\r\nimport { NextResponse } from 'next/server';\r\n\r\n/**\r\n * POST 處理函數\r\n * 處理來自 /api/chat 的 POST 請求\r\n */\r\nexport async function POST(request: Request) {\r\n  try {\r\n    return await handleChatCompletion(request);\r\n  } catch (error) {\r\n    console.error(\"API 處理錯誤:\", error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: { \r\n          message: \"處理請求時發生錯誤\", \r\n          code: \"SERVER_ERROR\" \r\n        } \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * OPTIONS 處理函數\r\n * 處理跨域預檢請求\r\n */\r\nexport async function OPTIONS() {\r\n  return new NextResponse(null, {\r\n    status: 204,\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    },\r\n  });\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAMO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,OAAO,MAAM,CAAA,GAAA,yIAAA,CAAA,uBAAoB,AAAD,EAAE;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;gBACL,SAAS;gBACT,MAAM;YACR;QACF,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAMO,eAAe;IACpB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF","debugId":null}}]
}